AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Cloudformation Killer - Schedule stacks termination

Parameters:
  Prefix:
    Description: The prefix stack names you want to terminate, split by comma
    Type: String
  CloudFormationRoleArn:
    Description: The Role ARN of Cloudformation Role
    Type: String
  DelayHours:
    Description: The delay in hours to consider a stack as obsolete
    Type: Number

Resources:
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: Lambda-Cf-Killer-Permissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
              - Effect: Allow
                Action:
                  - cloudformation:ListStacks
                  - cloudformation:ListStackResources
                  - cloudformation:DeleteStack
                  - s3:List*
                  - s3:DeleteObjectTagging
                  - s3:DeleteObjectVersion
                  - s3:DeleteObjectVersion
                  - s3:DeleteObject
                  - s3:DeleteBucketPolicy
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Ref CloudFormationRoleArn

  Function:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        import json
        import boto3
        import re
        import time
        import os
        from datetime import datetime, timedelta

        deltaTime = datetime.now() - timedelta(hours=int(os.environ['DELAY_HOURS']))
        s3 = boto3.resource('s3')
        clientCloudformation = boto3.client('cloudformation')

        stacks = clientCloudformation.get_paginator('list_stacks')
        resources = clientCloudformation.get_paginator('list_stack_resources')

        def handler(event, context):
            stacks_iterator = stacks.paginate(
                StackStatusFilter=['CREATE_COMPLETE', 'UPDATE_COMPLETE', 'ROLLBACK_COMPLETE', 'UPDATE_ROLLBACK_COMPLETE', 'DELETE_FAILED']
            )
            stacksName = []

            for page in stacks_iterator:
                for stack in page['StackSummaries']:
                    if 'ParentId' not in stack:
                        for prefix in os.environ['PREFIX_STACK_NAME'].split(','):
                            regStackName = re.compile('^' + prefix + '(-\w+)?-[0-9]+$')
                            if regStackName.match(stack['StackName']):
                                if stack['StackName'] not in stacksName:
                                    stackTimestamp = time.mktime(stack['LastUpdatedTime'].timetuple())
                                    deletaTimestamp = time.mktime(deltaTime.timetuple())

                                    if stackTimestamp < deletaTimestamp:
                                        stacksName.append(stack['StackName'])
                                    else:
                                        print("Ignore Stack {} due to mismatch time".format(stack['StackName']))

            for name in stacksName:
                clientCloudformation.delete_stack(
                    StackName=name,
                    RoleARN=os.environ['CF_ROLE_ARN']
                )
                print("CloudFormation Stack {} has been terminated!".format(name))

                resources_iterator = resources.paginate(StackName=name);
                for page in resources_iterator:
                  for resource in page['StackResourceSummaries']:
                    if resource["ResourceType"] == 'AWS::S3::Bucket' :
                      print('Empty bucket : {}'.format(resource["PhysicalResourceId"]))
                      bucket = s3.Bucket(resource["PhysicalResourceId"])
                      bucket.objects.all().delete()

            return "Finish"

      Handler: index.handler
      Runtime: python3.6
      Timeout: 60
      Description: Terminate Cloudformation Stack of Ephemeral Infrastructure As Code
      Role: !Sub ${Role.Arn}
      Environment:
        Variables:
          PREFIX_STACK_NAME: !Ref Prefix
          CF_ROLE_ARN: !Ref CloudFormationRoleArn
          DELAY_HOURS: !Ref DelayHours

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: ScheduledRule
      ScheduleExpression: cron(*/10 19-2 * * ? *)
      State: ENABLED
      Targets:
        - Arn: !GetAtt Function.Arn
          Id: CloudFormationKillerStack

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref Function
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledRule.Arn
